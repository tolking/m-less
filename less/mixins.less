@import "alias";
@import "mixitem";
@import "color";
@import "family";

// 尺寸
.box (@width: auto, @height: auto) {
  .w(@width);
  .h(@height);
  .min (@width: auto, @height: auto) {
    .minw(@width);
    .minh(@height);
  }
  .min (@width, @height, @bwidth, @bheight: auto) {
    .box(@bwidth, @bheight);
    .minw(@width);
    .minh(@height);
  }
  .max (@width: auto, @height: auto) {
    .maxw(@width);
    .maxh(@height);
  }
  .max (@width, @height, @bwidth, @bheight: auto) {
    .box(@bwidth, @bheight);
    .maxw(@width);
    .maxh(@height);
  }
  .shadow (@x, @y, @b, @color: @c-shadow) {
    .bs(@x, @y, @b, @color);
  }
  .shadow (@x, @y, @b, @color, @width, @height: auto) {
    .box(@width, @height);
    .bs(@x, @y, @b, @color);
  }
  .border (@weight: 1px, @color: @c-line, @style: solid) {
    .bd(@weight, @style, @color);
    .top (@weight: 1px, @color: @c-line, @style: solid) {
      .bdt(@weight, @style, @color);
    }
    .bottom (@weight: 1px, @color: @c-line, @style: solid) {
      .bdb(@weight, @style, @color);
    }
    .left (@weight: 1px, @color: @c-line, @style: solid) {
      .bdl(@weight, @style, @color);
    }
    .right (@weight: 1px, @color: @c-line, @style: solid) {
      .bdr(@weight, @style, @color);
    }
  }
  .border (@weight, @color, @style, @width, @height: auto) {
    .box(@width, @height);
    .bd(@weight, @style, @color);
    .top (@weight, @color, @style, @width, @height: auto) {
      .box(@width, @height);
      .bdt(@weight, @style, @color);
    }
    .bottom (@weight, @color, @style, @width, @height: auto) {
      .box(@width, @height);
      .bdb(@weight, @style, @color);
    }
    .left (@weight, @color, @style, @width, @height: auto) {
      .box(@width, @height);
      .bdl(@weight, @style, @color);
    }
    .right (@weight, @color, @style, @width, @height: auto) {
      .box(@width, @height);
      .bdr(@weight, @style, @color);
    }
  }
  .radius (@radius) {
    .br(@radius);
  }
  .radius (@radius, @width, @height: @width) {
    .box(@width, @height);
    .br(@radius);
  }
}

// 背景
.bg (...) {
  background: @arguments;
}
.imgbg (@url) {
  .bgi(@url);
  .bgr(no-repeat);
  .bgp(center);
  .bgs(100%);
}

// 字体
.font (@size: 1rem, @color: @c-text) {
  .fs(@size);
  .c(@color);
  .indent (@indent) {
    .ti(@indent);
  }
  .indent (@indent, @size, @color: @c-text) {
    .font(@size, @color);
    .ti(@indent);
  }
  .height (@height) {
    .lh(@height);
  }
  .height (@height, @size, @color: @c-text) {
    .font(@size, @color);
    .lh(@height);
  }
  .weight (@weight: normal) {
    .fw(@weight);
  }
  .weight (@weight, @size, @color: @c-text) {
    .font(@size, @color);
    .fw(@weight);
  }
  .shadow (@x, @y, @b, @shadow-color: @c-shadow) {
    .ts(@x, @y, @b, @shadow-color);
  }
  .shadow (@x, @y, @b, @shadow-color, @size, @color: @c-text) {
    .font(@size, @color);
    .ts(@x, @y, @b, @shadow-color);
  }
  .stroke (@stroke-weight, @stroke-color, @weight) {
    .fw(@weight);
    .tso(@stroke-weight, @stroke-color);
  }
  .stroke (@stroke-weight, @stroke-color, @weight, @size, @color: @c-text) {
    .font(@size, @color);
    .fw(@weight);
    .tso(@stroke-weight, @stroke-color);
  }
}
.font (@size, @color, @family) {
  .fs(@size);
  .c(@color);
  .ff(@family);
}

// 定位
.position (@p: absolute, @index: 1, @top: 0, @bottom: 0, @left: 0, @right: 0) {
  .pos(@p);
  .zi(@index);
  .t(@top);
  .b(@bottom);
  .l(@left);
  .r(@right);
  .top (@p, @index: 1, @top: 0, @left: 0, @right: 0) {
    .pos(@p);
    .zi(@index);
    .t(@top);
    .l(@left);
    .r(@right);
  }
  .bottom (@p, @index: 1, @bottom: 0, @left: 0, @right: 0) {
    .pos(@p);
    .zi(@index);
    .b(@bottom);
    .l(@left);
    .r(@right);
  }
  .left (@p, @index: 1, @left: 0, @top: 0, @bottom: 0) {
    .pos(@p);
    .zi(@index);
    .t(@top);
    .b(@bottom);
    .l(@left);
  }
  .right (@p, @index: 1, @right: 0,@top: 0, @bottom: 0) {
    .pos(@p);
    .zi(@index);
    .t(@top);
    .b(@bottom);
    .r(@right);
  }
  .top-left (@p, @index: 1, @top: 0, @left: 0) {
    .pos(@p);
    .zi(@index);
    .t(@top);
    .l(@left);
  }
  .top-right (@p, @index: 1, @top: 0, @right: 0) {
    .pos(@p);
    .zi(@index);
    .t(@top);
    .r(@right);
  }
  .bottom-left (@p, @index: 1, @bottom: 0, @left: 0) {
    .pos(@p);
    .zi(@index);
    .b(@bottom);
    .l(@left);
  }
  .bottom-right (@p, @index: 1, @bottom: 0, @right: 0) {
    .pos(@p);
    .zi(@index);
    .b(@bottom);
    .r(@right);
  }
}
.fixed (@index: 1, @top: 0, @bottom: 0, @left: 0, @right: 0) {
  .position(fixed, @index, @top, @bottom, @left, @right);
  .top (@index: 1, @top: 0, @left: 0, @right: 0) {
    .position>.top(fixed,  @index, @top, @left, @right);
  }
  .bottom (@index: 1, @bottom: 0, @left: 0, @right: 0) {
    .position>.bottom(fixed,  @index, @bottom, @left, @right);
  }
  .left (@index: 1, @left: 0, @top: 0, @bottom: 0) {
    .position>.left(fixed, @index, @left, @top, @bottom);
  }
  .right (@index: 1, @right: 0, @top: 0, @bottom: 0) {
    .position>.right(fixed, @right, @top, @bottom);
  }
  .top-left (@index: 1, @top: 0, @left: 0) {
    .position>.top-left(fixed, @index, @top, @left);
  }
  .top-right (@index: 1, @top: 0, @right: 0) {
    .position>.top-right(fixed, @index, @top, @right);
  }
  .bottom-left (@index: 1, @bottom: 0, @left: 0) {
    .position>.bottom-left(fixed, @index, @bottom, @left);
  }
  .bottom-right (@index: 1, @bottom: 0, @right: 0) {
    .position>.bottom-right(fixed, @index, @bottom, @right);
  }
}
.absolute (@index: 1, @top: 0, @bottom: 0, @left: 0, @right: 0) {
  .position(absolute, @index, @top, @bottom, @left, @right);
  .top (@index: 1, @top: 0, @left: 0, @right: 0) {
    .position>.top(absolute,  @index, @top, @left, @right);
  }
  .bottom (@index: 1, @bottom: 0, @left: 0, @right: 0) {
    .position>.bottom(absolute,  @index, @bottom, @left, @right);
  }
  .left (@index: 1, @left: 0, @top: 0, @bottom: 0) {
    .position>.left(absolute, @index, @left, @top, @bottom);
  }
  .right (@index: 1, @right: 0, @top: 0, @bottom: 0) {
    .position>.right(absolute, @right, @top, @bottom);
  }
  .top-left (@index: 1, @top: 0, @left: 0) {
    .position>.top-left(absolute, @index, @top, @left);
  }
  .top-right (@index: 1, @top: 0, @right: 0) {
    .position>.top-right(absolute, @index, @top, @right);
  }
  .bottom-left (@index: 1, @bottom: 0, @left: 0) {
    .position>.bottom-left(absolute, @index, @bottom, @left);
  }
  .bottom-right (@index: 1, @bottom: 0, @right: 0) {
    .position>.bottom-right(absolute, @index, @bottom, @right);
  }
}
.relative (@index: 1, @top: 0, @bottom: 0, @left: 0, @right: 0) {
  .position(relative, @index, @top, @bottom, @left, @right);
  .top (@index: 1, @top: 0, @left: 0, @right: 0) {
    .position>.top(relative,  @index, @top, @left, @right);
  }
  .bottom (@index: 1, @bottom: 0, @left: 0, @right: 0) {
    .position>.bottom(relative,  @index, @bottom, @left, @right);
  }
  .left (@index: 1, @left: 0, @top: 0, @bottom: 0) {
    .position>.left(relative, @index, @left, @top, @bottom);
  }
  .right (@index: 1, @right: 0, @top: 0, @bottom: 0) {
    .position>.right(relative, @right, @top, @bottom);
  }
  .top-left (@index: 1, @top: 0, @left: 0) {
    .position>.top-left(relative, @index, @top, @left);
  }
  .top-right (@index: 1, @top: 0, @right: 0) {
    .position>.top-right(relative, @index, @top, @right);
  }
  .bottom-left (@index: 1, @bottom: 0, @left: 0) {
    .position>.bottom-left(relative, @index, @bottom, @left);
  }
  .bottom-right (@index: 1, @bottom: 0, @right: 0) {
    .position>.bottom-right(relative, @index, @bottom, @right);
  }
}

// transform
// 矩阵
.matrix (@a1: 0, @a2: 0, @a3: 0, @a4: 0, @a5: 0, @a6: 0) {
  .tf(matrix(@a1, @a2, @a3, @a4, @a5, @a6));
  .matrix3d (@a1: 0,@a2: 0,@a3: 0,@a4: 0,@a5: 0,@a6: 0,@a7: 0,@a8: 0,@a9: 0,@a10: 0,@a11: 0,@a12: 0,@a13: 0,@a14: 0,@a15: 0,@a16: 0) {
    .tf(matrix3d(@a1, @a2, @a3, @a4, @a5, @a6, @a7, @a8, @a9, @a10, @a11, @a12, @a13, @a14, @a15, @a16))
  }
}
// 平移
.translate (@x: 0, @y: @x) {
  .tf(translate(@x, @y));
  .x (@x: 0) {
    .tf(translateX(@x));
  }
  .y (@y: 0) {
    .tf(translateY(@y));
  }
  .z (@z: 0) {
    .tf(translateZ(@z));
  }
  .translate3d (@x: 0, @y: 0, @z: 0) {
    .tf(translate3d(@x, @y, @z));
  }
}
// 缩放
.scale (@x: 0, @y: @x) {
  .tf(scale(@x, @y));
  .x (@x: 0) {
    .tf(scaleX(@x));
  }
  .y (@y: 0) {
    .tf(scaleY(@y));
  }
  .z (@z: 0) {
    .tf(scaleZ(@z));
  }
  .scale3d (@x: 0, @y: 0, @z: 0) {
    .tf(scale3d(@x, @y, @z));
  }
}
// 旋转
.rotate (@rotate: 0deg) {
  .tf(rotate(@rotate));
  .rotate3d (@x: 0, @y: 0, @z: 0, @rotate: 0deg) {
    .tf(rotate3d(@x, @y, @z, @rotate));
  }
}
// 倾斜
.skew (@x: 0deg, @y: @x) {
  .tf(skew(@x, @y));
  .x (@x: 0deg) {
    .tf(skewX(@x));
  }
  .y (@y: 0deg) {
    .tf(skewY(@y));
  }
}

// 滤镜
.filter (@filter) {
  .fil(@filter);
}
// 高斯模糊
.blur (@blur) {
  .fil(blur(@blur));
}
// 灰度
.grayscale (@grayscale) {
  .fil(grayscale(@grayscale));
}
// 褐色
.sepia (@sepia) {
  .fil(sepia(@sepia));
}
// 饱和度
.saturate (@saturate) {
  .fil(saturate(@saturate));
}
// 色相旋转
.hue-rotate (@hue-rotate) {
  .fil(hue-rotate(@hue-rotate));
}
// 反色
.invert (@invert) {
  .fil(invert(@invert));
}
// 透明度
.opacity (@opacity) {
  .fil(opacity(@opacity));
}
// 亮度
.brightness (@brightness) {
  .fil(brightness(@brightness));
}
// 对比度
.contrast (@contrast) {
  .fil(contrast(@contrast));
}
// 阴影
.drop-shadow (@x, @y, @b, @color: @c-shadow) {
  .fil(drop-shadow(@x, @y, @b, @color));
}