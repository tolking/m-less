@import "variable";
@import "alias";
@import "mixitem";
@import "svg";

// 尺寸
.box (@width: auto, @height: auto) {
  .w(@width);
  .h(@height);
  .min (@width: auto, @height: auto) {
    .minw(@width);
    .minh(@height);
  }
  .min (@width, @height, @bwidth, @bheight: auto) {
    .box(@bwidth, @bheight);
    .minw(@width);
    .minh(@height);
  }
  .max (@width: auto, @height: auto) {
    .maxw(@width);
    .maxh(@height);
  }
  .max (@width, @height, @bwidth, @bheight: auto) {
    .box(@bwidth, @bheight);
    .maxw(@width);
    .maxh(@height);
  }
  .shadow (@x: 0, @y: 1px, @b: 6px, @color: @c-shadow) {
    .bs(@x, @y, @b, @color);
  }
  .shadow (@x, @y, @b, @color, @width, @height: auto) {
    .box(@width, @height);
    .bs(@x, @y, @b, @color);
  }
  .border (@weight: 1px, @color: @c-line, @style: solid) {
    .bd(@weight, @style, @color);
    .top (@weight: 1px, @color: @c-line, @style: solid) {
      .bdt(@weight, @style, @color);
    }
    .bottom (@weight: 1px, @color: @c-line, @style: solid) {
      .bdb(@weight, @style, @color);
    }
    .left (@weight: 1px, @color: @c-line, @style: solid) {
      .bdl(@weight, @style, @color);
    }
    .right (@weight: 1px, @color: @c-line, @style: solid) {
      .bdr(@weight, @style, @color);
    }
  }
  .border (@weight, @color, @style, @width, @height: auto) {
    .box(@width, @height);
    .bd(@weight, @style, @color);
    .top (@weight, @color, @style, @width, @height: auto) {
      .box(@width, @height);
      .bdt(@weight, @style, @color);
    }
    .bottom (@weight, @color, @style, @width, @height: auto) {
      .box(@width, @height);
      .bdb(@weight, @style, @color);
    }
    .left (@weight, @color, @style, @width, @height: auto) {
      .box(@width, @height);
      .bdl(@weight, @style, @color);
    }
    .right (@weight, @color, @style, @width, @height: auto) {
      .box(@width, @height);
      .bdr(@weight, @style, @color);
    }
  }
  .radius (@radius) {
    .br(@radius);
  }
  .radius (@radius, @width, @height: @width) {
    .box(@width, @height);
    .br(@radius);
  }
}

// 字体
.font (@size: 1rem, @color: @c-text) {
  .fs(@size);
  .c(@color);
  .indent (@indent) {
    .ti(@indent);
  }
  .indent (@indent, @size, @color: @c-text) {
    .font(@size, @color);
    .ti(@indent);
  }
  .height (@height) {
    .lh(@height);
  }
  .height (@height, @size, @color: @c-text) {
    .font(@size, @color);
    .lh(@height);
  }
  .weight (@weight: normal) {
    .fw(@weight);
  }
  .weight (@weight, @size, @color: @c-text) {
    .font(@size, @color);
    .fw(@weight);
  }
  .shadow (@x: 0, @y: 1px, @b: 4px, @shadow-color: @c-shadow) {
    .ts(@x, @y, @b, @shadow-color);
  }
  .shadow (@x, @y, @b, @shadow-color: @c-shadow, @size, @color: @c-text) {
    .font(@size, @color);
    .ts(@x, @y, @b, @shadow-color);
  }
  .stroke (@stroke-weight, @stroke-color, @weight) {
    .fw(@weight);
    .tso(@stroke-weight, @stroke-color);
  }
  .stroke (@stroke-weight, @stroke-color, @weight, @size, @color: @c-text) {
    .font(@size, @color);
    .fw(@weight);
    .tso(@stroke-weight, @stroke-color);
  }
  .style (@style: italic) {
    font-style: @style;
  }
  .style (@style, @size, @color: @c-text) {
    .font(@size, @color);
    font-style: @style;
  }
}
.font (@size, @color, @family) {
  .fs(@size);
  .c(@color);
  .ff(@family);
}
.font-cc (@lh) {
  .ta(center);
  .lh(@lh);
}
// 文本隐藏
.font-hidden () {
  .wrap (@n) {
    .d(-webkit-box);
    -webkit-line-clamp: @n;
    -webkit-box-orient: vertical;
    .of-h;
    .to(ellipsis);
    .ws(normal);
  }
  .nowrap () {
    .of-h;
    .to(ellipsis);
    .ws(nowrap);
  }
}
// 文本分列
.font-column (@count, @gap, @width: 1px, @color: @c-line, @style: solid) {
  .cc(@count);
  .cg(@gap);
  .cr(@width, @color, @style);
}

// 定位
.position (@p: absolute, @index: 1, @top: 0, @right: @top, @bottom: @top, @left: @right) {
  .pos(@p);
  .t(@top);
  .b(@bottom);
  .l(@left);
  .r(@right);
  .zi(@index);
  .top (@p: absolute, @index: 1, @top: 0) {
    .pos(@p);
    .t(@top);
    .zi(@index);
  }
  .bottom (@p: absolute, @index: 1, @bottom: 0) {
    .pos(@p);
    .b(@bottom);
    .zi(@index);
  }
  .left (@p: absolute, @index: 1, @left: 0) {
    .pos(@p);
    .l(@left);
    .zi(@index);
  }
  .right (@p: absolute, @index: 1, @right: 0) {
    .pos(@p);
    .r(@right);
    .zi(@index);
  }
  .top-left (@p: absolute, @index: 1, @top: 0, @left: 0) {
    .pos(@p);
    .t(@top);
    .l(@left);
    .zi(@index);
  }
  .top-right (@p: absolute, @index: 1, @top: 0, @right: 0) {
    .pos(@p);
    .t(@top);
    .r(@right);
    .zi(@index);
  }
  .bottom-left (@p: absolute, @index: 1, @bottom: 0, @left: 0) {
    .pos(@p);
    .b(@bottom);
    .l(@left);
    .zi(@index);
  }
  .bottom-right (@p: absolute, @index: 1, @bottom: 0, @right: 0) {
    .pos(@p);
    .b(@bottom);
    .r(@right);
    .zi(@index);
  }
}
.fixed (@index: 1, @top: 0, @right: @top, @bottom: @top, @left: @right) {
  .position(fixed, @index, @top, @right, @bottom, @left);
  .top (@index: 1, @top: 0) {
    .position>.top(fixed,  @index, @top);
  }
  .bottom (@index: 1, @bottom: 0) {
    .position>.bottom(fixed,  @index, @bottom);
  }
  .left (@index: 1, @left: 0) {
    .position>.left(fixed, @index, @left);
  }
  .right (@index: 1, @right: 0) {
    .position>.right(fixed, @right);
  }
  .top-left (@index: 1, @top: 0, @left: 0) {
    .position>.top-left(fixed, @index, @top, @left);
  }
  .top-right (@index: 1, @top: 0, @right: 0) {
    .position>.top-right(fixed, @index, @top, @right);
  }
  .bottom-left (@index: 1, @bottom: 0, @left: 0) {
    .position>.bottom-left(fixed, @index, @bottom, @left);
  }
  .bottom-right (@index: 1, @bottom: 0, @right: 0) {
    .position>.bottom-right(fixed, @index, @bottom, @right);
  }
}
.absolute (@index: 1, @top: 0, @right: @top, @bottom: @top, @left: @right) {
  .position(absolute, @index, @top, @right, @bottom, @left);
  .top (@index: 1, @top: 0) {
    .position>.top(absolute,  @index, @top);
  }
  .bottom (@index: 1, @bottom: 0) {
    .position>.bottom(absolute,  @index, @bottom);
  }
  .left (@index: 1, @left: 0) {
    .position>.left(absolute, @index, @left);
  }
  .right (@index: 1, @right: 0) {
    .position>.right(absolute, @right);
  }
  .top-left (@index: 1, @top: 0, @left: 0) {
    .position>.top-left(absolute, @index, @top, @left);
  }
  .top-right (@index: 1, @top: 0, @right: 0) {
    .position>.top-right(absolute, @index, @top, @right);
  }
  .bottom-left (@index: 1, @bottom: 0, @left: 0) {
    .position>.bottom-left(absolute, @index, @bottom, @left);
  }
  .bottom-right (@index: 1, @bottom: 0, @right: 0) {
    .position>.bottom-right(absolute, @index, @bottom, @right);
  }
}
.relative (@index: 1, @top: 0, @right: @top, @bottom: @top, @left: @right) {
  .position(relative, @index, @top, @right, @bottom, @left);
  .top (@index: 1, @top: 0) {
    .position>.top(relative,  @index, @top);
  }
  .bottom (@index: 1, @bottom: 0) {
    .position>.bottom(relative,  @index, @bottom);
  }
  .left (@index: 1, @left: 0) {
    .position>.left(relative, @index, @left);
  }
  .right (@index: 1, @right: 0) {
    .position>.right(relative, @right);
  }
  .top-left (@index: 1, @top: 0, @left: 0) {
    .position>.top-left(relative, @index, @top, @left);
  }
  .top-right (@index: 1, @top: 0, @right: 0) {
    .position>.top-right(relative, @index, @top, @right);
  }
  .bottom-left (@index: 1, @bottom: 0, @left: 0) {
    .position>.bottom-left(relative, @index, @bottom, @left);
  }
  .bottom-right (@index: 1, @bottom: 0, @right: 0) {
    .position>.bottom-right(relative, @index, @bottom, @right);
  }
}
.position-cc (@z-index: 1) {
  .absolute>.top-left(@z-index, 50%, 50%);
  .translate(-50%, -50%);
}
.position-cc (@z-index: 1, @width, @height) {
  .absolute>.top-left(@z-index, 50%, 50%);
  .mt(-@height / 2);
  .ml(-@width / 2);
  .box(@width, @height);
}

// transform
// 矩阵
.matrix (@a1: 0, @a2: 0, @a3: 0, @a4: 0, @a5: 0, @a6: 0) {
  .tf(matrix(@a1, @a2, @a3, @a4, @a5, @a6));
  .matrix3d (@a1: 0,@a2: 0,@a3: 0,@a4: 0,@a5: 0,@a6: 0,@a7: 0,@a8: 0,@a9: 0,@a10: 0,@a11: 0,@a12: 0,@a13: 0,@a14: 0,@a15: 0,@a16: 0) {
    .tf(matrix3d(@a1, @a2, @a3, @a4, @a5, @a6, @a7, @a8, @a9, @a10, @a11, @a12, @a13, @a14, @a15, @a16))
  }
}
// 平移
.translate (@x: 0, @y: 0) {
  .tf(translate(@x, @y));
  .x (@x: 0) {
    .tf(translateX(@x));
  }
  .y (@y: 0) {
    .tf(translateY(@y));
  }
  .z (@z: 0) {
    .tf(translateZ(@z));
  }
  .translate3d (@x: 0, @y: 0, @z: 0) {
    .tf(translate3d(@x, @y, @z));
  }
}
// 缩放
.scale (@x: 0, @y: 0) {
  .tf(scale(@x, @y));
  .x (@x: 0) {
    .tf(scaleX(@x));
  }
  .y (@y: 0) {
    .tf(scaleY(@y));
  }
  .z (@z: 0) {
    .tf(scaleZ(@z));
  }
  .scale3d (@x: 0, @y: 0, @z: 0) {
    .tf(scale3d(@x, @y, @z));
  }
}
// 旋转
.rotate (@rotate: 0deg) {
  .tf(rotate(@rotate));
  .x (@x: 0) {
    .tf(rotateX(@x));
  }
  .y (@y: 0) {
    .tf(rotateY(@y));
  }
  .z (@z: 0) {
    .tf(rotateZ(@z));
  }
  .rotate3d (@x: 0, @y: 0, @z: 0, @rotate: 0deg) {
    .tf(rotate3d(@x, @y, @z, @rotate));
  }
}
// 倾斜
.skew (@x: 0deg, @y: 0deg) {
  .tf(skew(@x, @y));
  .x (@x: 0deg) {
    .tf(skewX(@x));
  }
  .y (@y: 0deg) {
    .tf(skewY(@y));
  }
}

// 背景
.bg-img (@url, @s: 100%, @p: center, @r: no-repeat) {
  .bgi(url(@url));
  .bgs(@s);
  .bgp(@p);
  .bgr(@r);
}
.bg-sprite (@url, @p, @r: no-repeat) {
  .bgi(url(@url));
  .bgs(auto);
  .bgp(@p);
  .bgr(@r);
}
.bg-line (@r, @s-c: @c-black, @e-c: fade(@s-c, 0%)) {
  .bgi(linear-gradient(@r, @s-c, @e-c));
}
.bg-line (@r, @s-c, @c2, @e-c) {
  .bgi(linear-gradient(@r, @s-c, @c2, @e-c));
}
.bg-line (@r, @s-c, @c2, @c3, @e-c) {
  .bgi(linear-gradient(@r, @s-c, @c2, @c3, @e-c));
}
.bg-line (@r, @s-c, @c2, @c3, @c4, @e-c) {
  .bgi(linear-gradient(@r, @s-c, @c2, @c3, @c4, @e-c));
}
.bg-line-rainbow (@r: 90deg) {
  .bgi(linear-gradient(@r, #E50743 0%, #F9870F 15%, #E8ED30 30%, #3FA62E 45%, #3BB4D7 60%, #2F4D9E 75%, #71378A 80%));
}
.bg-radial (@r, @s-c: @c-black, @e-c: fade(@s-c, 0%)) {
  .bgi(radial-gradient(@r, @s-c, @e-c));
}
.bg-radial (@r, @s-c, @c2, @e-c) {
  .bgi(radial-gradient(@r, @s-c, @c2, @e-c));
}
.bg-radial (@r, @s-c, @c2, @c3, @e-c) {
  .bgi(radial-gradient(@r, @s-c, @c2, @c3, @e-c));
}
.bg-radial (@r, @s-c, @c2, @c3, @c4, @e-c) {
  .bgi(radial-gradient(@r, @s-c, @c2, @c3, @c4, @e-c));
}
.bg-radial-rainbow (@r: circle) {
  .bgi(radial-gradient(@r, #E50743 0%, #F9870F 15%, #E8ED30 30%, #3FA62E 45%, #3BB4D7 60%, #2F4D9E 75%, #71378A 80%));
}

// 扩散线条
.spread () {
  .top (@width: 100%, @height: 1px, @color: @c-line, @time: 1s) {
    .transition(transform, @time);
    &:before {
      .con("");
      .d-b;
      .ml(calc((100% - @width) / 2));
      .box(@width, @height);
      .bgc(@color);
      .scale>.x(0);
      .transition(transform, @time);
    }
    &:hover:before {
      .ml(calc((100% - @width) / 2));
      .scale>.x(1);
      .transition(transform, @time);
    }
  }
  .bottom (@width: 100%, @height: 1px, @color: @c-line, @time: 1s) {
    .transition(transform, @time);
    &:after {
      .con("");
      .d-b;
      .ml(calc((100% - @width) / 2));
      .box(@width, @height);
      .bgc(@color);
      .scale>.x(0);
      .transition(transform, @time);
    }
    &:hover:after {
      .ml(calc((100% - @width) / 2));
      .scale>.x(1);
      .transition(transform, @time);
    }
  }
  .left (@width: 1px, @height: 100%, @color: @c-line, @time: 1s) {
    .transition(transform, @time);
    &:before {
      .con("");
      .box(@width, @height);
      .bgc(@color);
      .scale>.y(0);
      float: left;
      .transition(transform, @time);
    }
    &:hover:before {
      .scale>.y(1);
      .transition(transform, @time);
    }
  }
  .right (@width: 1px, @height: 100%, @color: @c-line, @time: 1s) {
    .transition(transform, @time);
    &:after {
      .con("");
      .box(@width, @height);
      .bgc(@color);
      .scale>.y(0);
      float: right;
      .transition(transform, @time);
    }
    &:hover:after {
      .scale>.y(1);
      .transition(transform, @time);
    }
  }
  .top-bottom (@width: 100%, @height: 100%, @color: @c-line, @time: 1s) {
    .pos(relative);
    .of-h;
    .transition(transform, @time);
    &:after {
      .con("");
      .absolute;
      .box(@width, @height);
      .bgc(@color);
      .translate>.y(-100%);
      .transition(transform, @time);
    }
    &:hover:after {
      .translate>.y(0);
      .transition(transform, @time);
    }
  }
  .bottom-top (@width: 100%, @height: 100%, @color: @c-line, @time: 1s) {
    .pos(relative);
    .of-h;
    .transition(transform, @time);
    &:after {
      .con("");
      .absolute;
      .box(@width, @height);
      .bgc(@color);
      .translate>.y(100%);
      .transition(transform, @time);
    }
    &:hover:after {
      .translate>.y(0);
      .transition(transform, @time);
    }
  }
  .left-right (@width: 100%, @height: 100%, @color: @c-line, @time: 1s) {
    .pos(relative);
    .of-h;
    .transition(transform, @time);
    &:after {
      .con("");
      .absolute;
      .box(@width, @height);
      .bgc(@color);
      .translate>.x(-100%);
      .transition(transform, @time);
    }
    &:hover:after {
      .translate>.x(0);
      .transition(transform, @time);
    }
  }
  .left-right (@width: 100%, @height: 100%, @color: @c-line, @time: 1s) {
    .pos(relative);
    .of-h;
    .transition(transform, @time);
    &:after {
      .con("");
      .absolute;
      .box(@width, @height);
      .bgc(@color);
      .translate>.x(100%);
      .transition(transform, @time);
    }
    &:hover:after {
      .translate>.x(0);
      .transition(transform, @time);
    }
  }
}

// 镜像效果
.reflect (@l: 0px, @opacity: 0.3, @length: 70%){
  .bref(below @l linear-gradient(0deg, rgba(250, 250, 250, @opacity),rgba(250, 250, 250, 0) @length,rgba(250, 250, 250, 0)));
  .above (@l: 0px, @opacity: 0.3, @length: 70%) {
    .bref(above @l linear-gradient(180deg, rgba(250, 250, 250, @opacity),rgba(250, 250, 250, 0) @length,rgba(250, 250, 250, 0)));
  }
  .top (@l: 0px, @opacity: 0.3, @length: 70%) {
    .reflect>.above(@l, @opacity, @length);
  }
  .below (@l: 0px, @opacity: 0.3, @length: 70%) {
    .bref(below @l linear-gradient(0deg, rgba(250, 250, 250, @opacity),rgba(250, 250, 250, 0) @length,rgba(250, 250, 250, 0)));
  }
  .bottom (@l: 0px, @opacity: 0.3, @length: 70%) {
    .reflect>.below(@l, @opacity, @length);
  }
  .left (@l: 0px, @opacity: 0.3, @length: 70%) {
    .bref(left @l linear-gradient(90deg, rgba(250, 250, 250, @opacity),rgba(250, 250, 250, 0) @length,rgba(250, 250, 250, 0)));
  }
  .right (@l: 0px, @opacity: 0.3, @length: 70%) {
    .bref(right @l linear-gradient(270deg, rgba(250, 250, 250, @opacity),rgba(250, 250, 250, 0) @length,rgba(250, 250, 250, 0)));
  }
}

// 按钮
.btn (@w, @h: @w, @r: 0, @c: @c-btn, @time: 1s, @d: 5%, @l: 70%) {
  .pos-r;
  .of-h;
  .box>.radius(@r, @w, @h);
  .bgc(@c);
  .font-cc(@h);
  .cur-p;
  .transition(all, @time);
  &:after {
    .con("");
    .absolute;
    .d-b;
    .box>.radius(@r, 100%, @h);
    .bg-radial(circle, lighten(@c, @l) 10%, @c-t 11%);
    .bgr(no-repeat);
    .bgp(50%);
    .op(0);
    .scale(10, 10);
    pointer-events: none;
    .transition(all, @time);
  }
  &:hover {
    .bgc(darken(@c, @d));
    .transition(all, @time);
  }
  &:active:after {
    .op(0.4);
    .scale;
    .transition(all, 0s);
  }
}

// 箭头
.arrow () {
  .top(@width: 5px, @color: @c-line) {
    .box(0, 0);
    .bdl(@width, @c-t);
    .bdr(@width, @c-t);
    .bdb(@width, @color);
  }
  .bottom(@width: 5px, @color: @c-line) {
    .box(0, 0);
    .bdl(@width, @c-t);
    .bdr(@width, @c-t);
    .bdt(@width, @color);
  }
  .left(@width: 5px, @color: @c-line) {
    .box(0, 0);
    .bdt(@width, @c-t);
    .bdb(@width, @c-t);
    .bdr(@width, @color);
  }
  .right(@width: 5px, @color: @c-line) {
    .box(0, 0);
    .bdt(@width, @c-t);
    .bdb(@width, @c-t);
    .bdl(@width, @color);
  }
  .top-left(@width: 5px, @color: @c-line) {
    .box(0, 0);
    .bdb(@width, @c-t);
    .bdl(@width, @color);
  }
  .top-right(@width: 5px, @color: @c-line) {
    .box(0, 0);
    .bdb(@width, @c-t);
    .bdr(@width, @color);
  }
  .bottom-left(@width: 5px, @color: @c-line) {
    .box(0, 0);
    .bdt(@width, @c-t);
    .bdl(@width, @color);
  }
  .bottom-right(@width: 5px, @color: @c-line) {
    .box(0, 0);
    .bdt(@width, @c-t);
    .bdr(@width, @color);
  }
}

// 滤镜
.filter (...) {
  .fil(@arguments);
}
// 高斯模糊
.blur (@blur) {
  .fil(blur(@blur));
}
// 灰度
.grayscale (@grayscale) {
  .fil(grayscale(@grayscale));
}
// 褐色
.sepia (@sepia) {
  .fil(sepia(@sepia));
}
// 饱和度
.saturate (@saturate) {
  .fil(saturate(@saturate));
}
// 色相旋转
.hue-rotate (@hue-rotate) {
  .fil(hue-rotate(@hue-rotate));
}
// 反色
.invert (@invert) {
  .fil(invert(@invert));
}
// 透明度
.opacity (@opacity) {
  .fil(opacity(@opacity));
}
// 亮度
.brightness (@brightness) {
  .fil(brightness(@brightness));
}
// 对比度
.contrast (@contrast) {
  .fil(contrast(@contrast));
}
// 阴影
.drop-shadow (@x, @y, @b, @color: @c-shadow) {
  .fil(drop-shadow(@x, @y, @b, @color));
}

// 动画 @duration: 持续时间,  @delay: 延迟播放, @count: 播放次数(infinite: 无限次播放)
.animation (@name, @duration: 1s, @delay: 0s, @count: infinite) {
  .ann(@name);
  .andur(@duration);
  .andel(@delay);
  .anc(@count);
}
.animation-state (@duration: 1s, @delay: 0s, @count: infinite) {
  .andur(@duration);
  .andel(@delay);
  .anc(@count);
}
.transition (@property: transform, @duration: 1s, @delay: 0s) {
  .tsp(@property);
  .tsdur(@duration);
  .tsdel(@delay);
}